{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(open https://github.com/azumag/local-to-rtmp-pusher/pull/new/fix/upload)",
      "Bash(npm install:*)",
      "Bash(mkdir:*)",
      "Bash(git fetch:*)",
      "Bash(git merge:*)",
      "Bash(git commit:*)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(npx husky init:*)",
      "Bash(chmod:*)",
      "Bash(npm run lint:*)",
      "Bash(gh auth:*)",
      "Bash(gh pr create:*)",
      "Bash(mv:*)",
      "Bash(npm run build:*)",
      "Bash(grep:*)",
      "Bash(curl:*)",
      "Bash(docker-compose down:*)",
      "Bash(make:*)",
      "Bash(docker-compose:*)",
      "Bash(docker logs:*)",
      "Bash(npm init:*)",
      "Bash(node:*)",
      "Bash(cp:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(git pull:*)",
      "Bash(docker exec:*)",
      "Bash(rm:*)",
      "Bash(git checkout:*)",
      "mcp__ide__executeCode",
      "Bash(git worktree add:*)",
      "Bash(git worktree:*)",
      "Bash(docker restart:*)",
      "Bash(git branch:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(PORT=3001 npm run dev)",
      "Bash(docker compose:*)",
      "Bash(CI_MODE=true docker compose up -d streamcaster-rtmp)",
      "Bash(CI_MODE=true docker compose up -d)",
      "Bash(npm run format:*)",
      "Bash(npx prettier:*)",
      "Bash(/Users/azumag/work/local-to-rtmp-pusher/scripts/install-puppeteer-mcp.sh:*)",
      "Bash(claude mcp add puppeteer \"npx\" \"-y\" \"@modelcontextprotocol/server-puppeteer\")",
      "Bash(claude mcp add:*)",
      "Bash(claude mcp:*)",
      "Bash(npm search:*)",
      "Bash(claude --mcp-debug)",
      "Bash(mcp-server-playwright:*)",
      "Bash(npx playwright:*)",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "Bash(git restore:*)",
      "mcp__puppeteer__puppeteer_click",
      "Bash(npm run dev:all:*)",
      "Bash(npm run:*)",
      "Bash(docker system prune:*)",
      "Bash(open:*)",
      "Bash(./test-stream.sh:*)",
      "Bash(./test-simple.sh:*)",
      "Bash(vlc:*)",
      "Bash(ffmpeg:*)",
      "Bash(./test-vlc.sh:*)",
      "Bash(./test-rtmp-only.sh:*)",
      "Bash(timeout:*)",
      "mcp__puppeteer__puppeteer_fill",
      "Bash(cat:*)",
      "Bash(# 既存のテストストリームを停止\ndocker exec streamcaster-backend pkill -f \"ffmpeg.*teststream\" || true\n\n# シンプルなテストストリームを開始\ndocker exec -d streamcaster-backend sh -c 'ffmpeg -re -f lavfi -i testsrc=size=1920x1080:rate=30 -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -vcodec libx264 -preset veryfast -b:v 1000k -acodec aac -b:a 128k -ar 44100 -ac 2 -f flv -t 60 rtmp://streamcaster-rtmp:1935/live/stream')",
      "Bash(docker network:*)",
      "Bash(docker run:*)",
      "Bash(# 既存のFFmpegプロセスを停止\ndocker exec streamcaster-backend pkill -f ffmpeg || true\n\n# テストパターンを直接RTMPサーバーに配信（30秒間）\ndocker exec -d streamcaster-backend ffmpeg -re -f lavfi -i testsrc=size=1920x1080:rate=30 -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -vcodec libx264 -preset veryfast -b:v 2000k -acodec aac -b:a 128k -ar 44100 -ac 2 -f flv rtmp://streamcaster-rtmp:1935/live/stream)",
      "Bash(# すべてのFFmpegプロセスを停止\ndocker exec streamcaster-backend pkill -f ffmpeg\n\n# 少し待ってから確認\nsleep 2\ndocker exec streamcaster-backend ps aux | grep ffmpeg | grep -v grep || echo \"No FFmpeg processes running\")",
      "Bash(# テストパターンを配信（stream-pocと同じ設定）\ndocker exec -d streamcaster-backend ffmpeg -re -f lavfi -i testsrc=size=1920x1080:rate=30 -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -vcodec libx264 -preset veryfast -profile:v baseline -level 3.1 -g 60 -keyint_min 60 -sc_threshold 0 -b:v 2000k -acodec aac -b:a 128k -ar 44100 -ac 2 -f flv rtmp://streamcaster-rtmp:1935/live/stream)",
      "Bash(# stream-pocで実証済みの設定でテストストリームを開始\ndocker exec streamcaster-backend ffmpeg -re -f lavfi -i testsrc=size=1920x1080:rate=30 -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 \\\n  -c:v libx264 \\\n  -preset veryfast \\\n  -tune zerolatency \\\n  -profile:v baseline \\\n  -level 3.1 \\\n  -g 60 \\\n  -keyint_min 60 \\\n  -sc_threshold 0 \\\n  -c:a aac \\\n  -b:a 128k \\\n  -ar 44100 \\\n  -ac 2 \\\n  -pix_fmt yuv420p \\\n  -r 30 \\\n  -maxrate 2500k \\\n  -bufsize 5000k \\\n  -f flv \\\n  rtmp://streamcaster-rtmp:1935/live/stream 2>&1 | head -30)",
      "Bash(# FFmpegプロセスを停止\ndocker exec streamcaster-backend pkill -f ffmpeg\n\n# テスト動画を作成してストリーミング\ndocker exec streamcaster-backend sh -c 'ffmpeg -re -i /app/cache/test-video.mp4 -c copy -f flv rtmp://streamcaster-rtmp:1935/live/stream 2>&1 | head -20')",
      "Bash(# ピクセルフォーマットを修正してテストストリームを開始\ndocker exec -d streamcaster-backend ffmpeg -re -f lavfi -i testsrc=size=1920x1080:rate=30 -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -vf format=yuv420p -c:v libx264 -preset veryfast -profile:v baseline -c:a aac -b:a 128k -ar 44100 -ac 2 -f flv rtmp://streamcaster-rtmp:1935/live/stream)",
      "Bash(# 現在のFFmpegを停止して、新しいストリームを開始\ndocker exec streamcaster-backend pkill -f ffmpeg\n\n# 動作確認済みのシンプルな設定でストリーミング\ndocker exec -d streamcaster-backend sh -c 'ffmpeg -re -f lavfi -i \"testsrc=size=1920x1080:rate=30\" -f lavfi -i \"anullsrc=channel_layout=stereo:sample_rate=44100\" -vf \"format=yuv420p\" -c:v libx264 -preset veryfast -b:v 2000k -c:a aac -b:a 128k -ar 44100 -ac 2 -f flv rtmp://streamcaster-rtmp:1935/live/stream')",
      "Bash(# 現在のテストストリームを停止\ndocker exec streamcaster-backend pkill -f ffmpeg\n\n# バックエンドコンテナを再起動して変更を反映\ndocker-compose restart streamcaster-backend)",
      "Bash(# バックエンドを再起動\ndocker-compose restart streamcaster-backend\n\n# 少し待ってから新しいセッションを作成\nsleep 10 && curl -X POST http://localhost:3001/api/stream/session/start \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"HLS Mode Test\",\n    \"endpoints\": [{\n      \"name\": \"Primary RTMP\",\n      \"url\": \"rtmp://streamcaster-rtmp:1935/live\",\n      \"streamKey\": \"stream\",\n      \"enabled\": true\n    }]\n  }')",
      "Bash(# RTMPサーバーを再起動\ndocker-compose restart streamcaster-rtmp\n\n# 少し待ってからテストストリーム開始\nsleep 10 && docker exec -d streamcaster-backend sh -c 'ffmpeg -re -f lavfi -i \"testsrc=size=1920x1080:rate=30\" -f lavfi -i \"anullsrc=channel_layout=stereo:sample_rate=44100\" -vf \"format=yuv420p\" -c:v libx264 -preset veryfast -b:v 2000k -c:a aac -b:a 128k -ar 44100 -ac 2 -f flv rtmp://streamcaster-rtmp:1935/live/stream')",
      "Bash(# すべてを停止してクリーンアップ\ndocker-compose down -v\n\n# 再ビルドして起動\ndocker-compose up -d --build)",
      "Bash(docker inspect:*)",
      "Bash(npx husky add:*)",
      "Bash(npx jest:*)",
      "Bash(npm ci:*)",
      "Bash(npm start)",
      "Bash(kill:*)"
    ],
    "deny": []
  }
}