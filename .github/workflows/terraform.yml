name: Terraform Infrastructure

on:
  push:
    branches: [main, development]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: "ap-northeast-1"
  TF_STATE_KEY: "streamcaster/terraform.tfstate"

permissions:
  id-token: write
  contents: read

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init (No Backend)
        working-directory: ./terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-terraform.sarif
          category: checkov-terraform

  terraform-plan-dev:
    name: Terraform Plan (Dev)
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.ref == 'refs/heads/development' || github.event.inputs.environment == 'dev'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_CLI_ARGS_init: "-backend-config=bucket=${{ secrets.TF_STATE_BUCKET }} -backend-config=dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }} -backend-config=region=${{ env.AWS_REGION }} -backend-config=key=${{ env.TF_STATE_KEY }}"
        run: terraform init

      - name: Terraform Plan (Dev)
        working-directory: ./terraform
        env:
          TF_VAR_stream_key: ${{ secrets.DEV_STREAM_KEY }}
          TF_VAR_rtmp_server: ${{ secrets.DEV_RTMP_SERVER }}
        run: |
          terraform plan \
            -var-file="environments/dev/terraform.tfvars" \
            -out=tfplan-dev

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-dev
          path: terraform/tfplan-dev
          retention-days: 7

  terraform-plan-prod:
    name: Terraform Plan (Prod)
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_CLI_ARGS_init: "-backend-config=bucket=${{ secrets.TF_STATE_BUCKET }} -backend-config=dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }} -backend-config=region=${{ env.AWS_REGION }} -backend-config=key=${{ env.TF_STATE_KEY }}"
        run: terraform init

      - name: Terraform Plan (Prod)
        working-directory: ./terraform
        env:
          TF_VAR_stream_key: ${{ secrets.PROD_STREAM_KEY }}
          TF_VAR_rtmp_server: ${{ secrets.PROD_RTMP_SERVER }}
          TF_VAR_google_drive_api_key: ${{ secrets.GOOGLE_DRIVE_API_KEY }}
          TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_google_refresh_token: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        run: |
          terraform plan \
            -var-file="environments/prod/terraform.tfvars" \
            -out=tfplan-prod

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-prod
          path: terraform/tfplan-prod
          retention-days: 30

  terraform-apply-dev:
    name: Terraform Apply (Dev)
    runs-on: ubuntu-latest
    needs: terraform-plan-dev
    if: |
      (github.ref == 'refs/heads/development' && github.event_name == 'push') ||
      (github.event.inputs.environment == 'dev' && github.event.inputs.action == 'apply')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-dev
          path: terraform/

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_CLI_ARGS_init: "-backend-config=bucket=${{ secrets.TF_STATE_BUCKET }} -backend-config=dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }} -backend-config=region=${{ env.AWS_REGION }} -backend-config=key=${{ env.TF_STATE_KEY }}"
        run: terraform init

      - name: Terraform Apply (Dev)
        working-directory: ./terraform
        env:
          TF_VAR_stream_key: ${{ secrets.DEV_STREAM_KEY }}
          TF_VAR_rtmp_server: ${{ secrets.DEV_RTMP_SERVER }}
        run: terraform apply tfplan-dev

      - name: Output Infrastructure Info
        working-directory: ./terraform
        run: |
          echo "## 🚀 Development Environment Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Web UI**: $(terraform output -raw web_ui_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **RTMP Pull**: $(terraform output -raw rtmp_pull_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **RTMP Stats**: $(terraform output -raw rtmp_stats_url)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### SSH Access" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "$(terraform output -raw ssh_command)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  terraform-apply-prod:
    name: Terraform Apply (Prod)
    runs-on: ubuntu-latest
    needs: terraform-plan-prod
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event.inputs.environment == 'prod' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-prod
          path: terraform/

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_CLI_ARGS_init: "-backend-config=bucket=${{ secrets.TF_STATE_BUCKET }} -backend-config=dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }} -backend-config=region=${{ env.AWS_REGION }} -backend-config=key=${{ env.TF_STATE_KEY }}"
        run: terraform init

      - name: Terraform Apply (Prod)
        working-directory: ./terraform
        env:
          TF_VAR_stream_key: ${{ secrets.PROD_STREAM_KEY }}
          TF_VAR_rtmp_server: ${{ secrets.PROD_RTMP_SERVER }}
          TF_VAR_google_drive_api_key: ${{ secrets.GOOGLE_DRIVE_API_KEY }}
          TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_google_refresh_token: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        run: terraform apply tfplan-prod

      - name: Output Infrastructure Info
        working-directory: ./terraform
        run: |
          echo "## 🎯 Production Environment Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Web UI**: $(terraform output -raw web_ui_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **RTMP Pull**: $(terraform output -raw rtmp_pull_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **RTMP Stats**: $(terraform output -raw rtmp_stats_url)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### SSH Access" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "$(terraform output -raw ssh_command)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Monthly Cost" >> $GITHUB_STEP_SUMMARY
          echo "- **Estimated**: $(terraform output -raw estimated_monthly_cost)" >> $GITHUB_STEP_SUMMARY

      - name: Notify Deployment
        uses: actions/github-script@v7
        with:
          script: |
            const output = `🎯 **Production StreamCaster Deployed Successfully!**
            
            **Access URLs:**
            - Web UI: $(terraform output -raw web_ui_url)
            - RTMP Pull: $(terraform output -raw rtmp_pull_url)
            
            **Deployment Info:**
            - Environment: Production
            - Instance: $(terraform output -raw instance_name)
            - Monthly Cost: $(terraform output -raw estimated_monthly_cost)
            
            **Next Steps:**
            1. Verify Web UI accessibility
            2. Test RTMP connection
            3. Configure monitoring alerts`;
            
            // Create deployment issue for tracking
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production Deployment - ${new Date().toISOString().split('T')[0]}`,
              body: output,
              labels: ['deployment', 'production']
            });

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_CLI_ARGS_init: "-backend-config=bucket=${{ secrets.TF_STATE_BUCKET }} -backend-config=dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }} -backend-config=region=${{ env.AWS_REGION }} -backend-config=key=${{ env.TF_STATE_KEY }}"
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: |
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.environment }}/terraform.tfvars" \
            -auto-approve

      - name: Cleanup Notification
        run: |
          echo "## 🗑️ Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Destroyed at: $(date)" >> $GITHUB_STEP_SUMMARY