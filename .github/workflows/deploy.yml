name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: ap-northeast-1
  TERRAFORM_VERSION: 1.9.0

# Prevent concurrent deployments
concurrency:
  group: streamcaster-deployment
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy StreamCaster
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Terraform Init
      working-directory: terraform
      run: |
        # Remove potentially corrupted state cache
        rm -rf .terraform
        terraform init -reconfigure -lock-timeout=300s
      
    - name: Force unlock state if locked
      working-directory: terraform
      run: |
        # Check if state is locked and force unlock if necessary
        echo "Checking for state locks..."
        LOCK_ERROR=$(terraform plan -detailed-exitcode -lock-timeout=5s 2>&1 | tee /dev/stderr | grep "Lock Info:" -A 10 || echo "")
        
        if echo "$LOCK_ERROR" | grep -q "Lock Info:"; then
          echo "State is locked, attempting to force unlock..."
          LOCK_ID=$(echo "$LOCK_ERROR" | grep "ID:" | awk '{print $2}' | head -1)
          
          if [ ! -z "$LOCK_ID" ] && [ "$LOCK_ID" != "" ]; then
            echo "Found lock ID: $LOCK_ID"
            echo "Forcing unlock..."
            echo "yes" | terraform force-unlock "$LOCK_ID" || echo "Force unlock failed or lock already released"
            echo "Waiting 10 seconds for unlock to propagate..."
            sleep 10
          else
            echo "Could not extract lock ID from error message"
          fi
        else
          echo "State is not locked, proceeding normally"
        fi
      env:
        TF_VAR_environment: prod
        TF_VAR_project_name: streamcaster
        TF_VAR_owner: azumag
        TF_VAR_instance_bundle_id: medium_2_0
        TF_VAR_admin_ip_ranges: '["0.0.0.0/0"]'
        TF_VAR_web_access_cidrs: '["0.0.0.0/0"]'
        TF_VAR_monitoring_access_cidrs: '["0.0.0.0/0"]'
        TF_VAR_repository_url: https://github.com/azumag/local-to-rtmp-pusher.git
        TF_VAR_deployment_branch: main
        TF_VAR_rtmp_server: rtmp://rtmp-server:1935/live/stream
        TF_VAR_stream_key: hoge
        TF_VAR_relay_target: rtmp://ingest.vrcdn.live/live/vrcdn_b191faef-e74f-4649-b0d9-cb0bf0a2d92cl
        TF_VAR_log_level: info
        TF_VAR_ssh_public_key_path: ""
        TF_VAR_google_drive_api_key: AIzaSyCgKZwTpqCW3JaJH3viEHTk4GTwDcroyKs
      
    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate
      
    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -detailed-exitcode -lock-timeout=300s
      id: plan
      continue-on-error: true
      env:
        TF_VAR_environment: prod
        TF_VAR_project_name: streamcaster
        TF_VAR_owner: azumag
        TF_VAR_instance_bundle_id: medium_2_0
        TF_VAR_admin_ip_ranges: '["0.0.0.0/0"]'
        TF_VAR_web_access_cidrs: '["0.0.0.0/0"]'
        TF_VAR_monitoring_access_cidrs: '["0.0.0.0/0"]'
        TF_VAR_repository_url: https://github.com/azumag/local-to-rtmp-pusher.git
        TF_VAR_deployment_branch: main
        TF_VAR_rtmp_server: rtmp://rtmp-server:1935/live/stream
        TF_VAR_stream_key: hoge
        TF_VAR_relay_target: rtmp://ingest.vrcdn.live/live/vrcdn_b191faef-e74f-4649-b0d9-cb0bf0a2d92cl
        TF_VAR_log_level: info
        TF_VAR_ssh_public_key_path: ""
        TF_VAR_google_drive_api_key: AIzaSyCgKZwTpqCW3JaJH3viEHTk4GTwDcroyKs
        
    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -lock-timeout=300s
      env:
        TF_VAR_environment: prod
        TF_VAR_project_name: streamcaster
        TF_VAR_owner: azumag
        TF_VAR_instance_bundle_id: medium_2_0
        TF_VAR_admin_ip_ranges: '["0.0.0.0/0"]'
        TF_VAR_web_access_cidrs: '["0.0.0.0/0"]'
        TF_VAR_monitoring_access_cidrs: '["0.0.0.0/0"]'
        TF_VAR_repository_url: https://github.com/azumag/local-to-rtmp-pusher.git
        TF_VAR_deployment_branch: main
        TF_VAR_rtmp_server: rtmp://rtmp-server:1935/live/stream
        TF_VAR_stream_key: hoge
        TF_VAR_relay_target: rtmp://ingest.vrcdn.live/live/vrcdn_b191faef-e74f-4649-b0d9-cb0bf0a2d92cl
        TF_VAR_log_level: info
        TF_VAR_ssh_public_key_path: ""
        TF_VAR_google_drive_api_key: AIzaSyCgKZwTpqCW3JaJH3viEHTk4GTwDcroyKs
      
    - name: Get instance information
      working-directory: terraform
      run: |
        echo "Instance deployed successfully!"
        terraform output
        
    - name: Wait for instance to be ready
      run: |
        INSTANCE_IP=$(cd terraform && terraform output -raw static_ip_address)
        echo "Waiting for instance $INSTANCE_IP to be ready..."
        
        # Wait up to 10 minutes for the application to be ready
        timeout 600 bash -c '
          while true; do
            if curl -f -s http://'$INSTANCE_IP':8080/api/health >/dev/null 2>&1; then
              echo "Instance is ready!"
              break
            fi
            echo "Waiting for instance to be ready..."
            sleep 30
          done
        '
        
    - name: Verify deployment
      run: |
        INSTANCE_IP=$(cd terraform && terraform output -raw static_ip_address)
        echo "Verifying deployment at $INSTANCE_IP..."
        
        # Test API health
        if curl -f http://$INSTANCE_IP:8080/api/health; then
          echo "✅ API health check passed"
        else
          echo "❌ API health check failed"
          exit 1
        fi
        
        # Test RTMP stats
        if curl -f http://$INSTANCE_IP:8081/stat >/dev/null 2>&1; then
          echo "✅ RTMP stats accessible"
        else
          echo "❌ RTMP stats not accessible"
          exit 1
        fi
        
        echo "🎉 Deployment verification completed successfully!"
        echo "🌐 Web UI: http://$INSTANCE_IP:8080"
        echo "📊 RTMP Stats: http://$INSTANCE_IP:8081/stat"
        echo "📺 RTMP URL: rtmp://$INSTANCE_IP:1935/live/stream"

  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Deployment completed successfully!"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        exit 1