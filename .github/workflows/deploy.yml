name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: ap-northeast-1
  TERRAFORM_VERSION: 1.9.0

# Prevent concurrent deployments
concurrency:
  group: streamcaster-deployment
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy StreamCaster
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Terraform Init
      working-directory: terraform
      run: |
        # Remove potentially corrupted state cache
        rm -rf .terraform
        terraform init -reconfigure -lock-timeout=300s
      
    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate
      
    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -detailed-exitcode -lock-timeout=300s
      id: plan
      continue-on-error: true
      
    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -lock-timeout=300s
      
    - name: Get instance information
      working-directory: terraform
      run: |
        echo "Instance deployed successfully!"
        terraform output
        
    - name: Wait for instance to be ready
      run: |
        INSTANCE_IP=$(cd terraform && terraform output -raw static_ip_address)
        echo "Waiting for instance $INSTANCE_IP to be ready..."
        
        # Wait up to 10 minutes for the application to be ready
        timeout 600 bash -c '
          while true; do
            if curl -f -s http://'$INSTANCE_IP':8080/api/health >/dev/null 2>&1; then
              echo "Instance is ready!"
              break
            fi
            echo "Waiting for instance to be ready..."
            sleep 30
          done
        '
        
    - name: Verify deployment
      run: |
        INSTANCE_IP=$(cd terraform && terraform output -raw static_ip_address)
        echo "Verifying deployment at $INSTANCE_IP..."
        
        # Test API health
        if curl -f http://$INSTANCE_IP:8080/api/health; then
          echo "✅ API health check passed"
        else
          echo "❌ API health check failed"
          exit 1
        fi
        
        # Test RTMP stats
        if curl -f http://$INSTANCE_IP:8081/stat >/dev/null 2>&1; then
          echo "✅ RTMP stats accessible"
        else
          echo "❌ RTMP stats not accessible"
          exit 1
        fi
        
        echo "🎉 Deployment verification completed successfully!"
        echo "🌐 Web UI: http://$INSTANCE_IP:8080"
        echo "📊 RTMP Stats: http://$INSTANCE_IP:8081/stat"
        echo "📺 RTMP URL: rtmp://$INSTANCE_IP:1935/live/stream"

  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Deployment completed successfully!"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        exit 1