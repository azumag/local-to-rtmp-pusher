name: Terraform Bootstrap (State Management)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Bootstrap action'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy
      create_github_oidc_role:
        description: 'Create GitHub OIDC role (requires OIDC provider setup)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: "ap-northeast-1"

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  terraform-bootstrap:
    name: Terraform Bootstrap
    runs-on: ubuntu-latest
    environment: bootstrap
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init (Bootstrap)
        working-directory: ./terraform/bootstrap
        run: terraform init

      - name: Terraform Plan (Bootstrap)
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        working-directory: ./terraform/bootstrap
        env:
          TF_VAR_create_github_oidc_role: ${{ github.event.inputs.create_github_oidc_role }}
        run: |
          terraform plan \
            -var="create_github_oidc_role=${{ github.event.inputs.create_github_oidc_role }}" \
            -out=tfplan-bootstrap

      - name: Terraform Apply (Bootstrap)
        if: github.event.inputs.action == 'apply'
        working-directory: ./terraform/bootstrap
        env:
          TF_VAR_create_github_oidc_role: ${{ github.event.inputs.create_github_oidc_role }}
        run: terraform apply tfplan-bootstrap

      - name: Terraform Destroy (Bootstrap)
        if: github.event.inputs.action == 'destroy'
        working-directory: ./terraform/bootstrap
        run: |
          terraform destroy \
            -var="create_github_oidc_role=${{ github.event.inputs.create_github_oidc_role }}" \
            -auto-approve

      - name: Output Bootstrap Information
        if: github.event.inputs.action == 'apply'
        working-directory: ./terraform/bootstrap
        run: |
          echo "## ðŸš€ Terraform State Management Bootstrap Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### S3 Bucket Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Bucket Name**: $(terraform output -raw state_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: $(terraform output -raw state_bucket_region)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### DynamoDB Table Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Table Name**: $(terraform output -raw dynamodb_table_name)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Secrets to Set" >> $GITHUB_STEP_SUMMARY
          echo "Add these secrets to your repository:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "TF_STATE_BUCKET=$(terraform output -raw state_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "TF_STATE_DYNAMODB_TABLE=$(terraform output -raw dynamodb_table_name)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Configuration" >> $GITHUB_STEP_SUMMARY
          echo "Update your main Terraform configuration with:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`hcl" >> $GITHUB_STEP_SUMMARY
          terraform output -raw backend_config_block >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Estimated Monthly Cost" >> $GITHUB_STEP_SUMMARY
          echo "- S3 Storage: ~\$0.023/GB" >> $GITHUB_STEP_SUMMARY
          echo "- DynamoDB: Pay-per-request (~\$0.0000125/request)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total**: ~\$1-3/month" >> $GITHUB_STEP_SUMMARY

      - name: Set Repository Secrets (if apply)
        if: github.event.inputs.action == 'apply'
        working-directory: ./terraform/bootstrap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract outputs
          BUCKET_NAME=$(terraform output -raw state_bucket_name)
          TABLE_NAME=$(terraform output -raw dynamodb_table_name)
          
          # Note: GitHub CLI can set secrets, but requires write permissions
          echo "Required secrets to set manually:"
          echo "TF_STATE_BUCKET: $BUCKET_NAME"
          echo "TF_STATE_DYNAMODB_TABLE: $TABLE_NAME"
          
          # You can also use the GitHub API to set secrets programmatically
          # if the GITHUB_TOKEN has the necessary permissions

      - name: Create Setup Issue
        if: github.event.inputs.action == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read terraform outputs
            const bucketName = await exec.getExecOutput('terraform', ['output', '-raw', 'state_bucket_name'], {
              cwd: './terraform/bootstrap'
            });
            const tableName = await exec.getExecOutput('terraform', ['output', '-raw', 'dynamodb_table_name'], {
              cwd: './terraform/bootstrap'
            });
            const backendConfig = await exec.getExecOutput('terraform', ['output', '-raw', 'backend_config_block'], {
              cwd: './terraform/bootstrap'
            });
            
            const issueBody = `## ðŸ”§ Terraform State Management Setup Complete
            
            The bootstrap process has created the necessary AWS resources for Terraform state management.
            
            ### âœ… Created Resources
            - **S3 Bucket**: \`${bucketName.stdout.trim()}\`
            - **DynamoDB Table**: \`${tableName.stdout.trim()}\`
            - **IAM Policies**: Created for state management permissions
            
            ### ðŸ“‹ Next Steps
            
            #### 1. Set GitHub Repository Secrets
            Add these secrets in Repository Settings â†’ Secrets and variables â†’ Actions:
            
            \`\`\`
            TF_STATE_BUCKET=${bucketName.stdout.trim()}
            TF_STATE_DYNAMODB_TABLE=${tableName.stdout.trim()}
            \`\`\`
            
            #### 2. Update Main Terraform Configuration
            Replace the backend configuration in \`terraform/main.tf\`:
            
            \`\`\`hcl
            ${backendConfig.stdout.trim()}
            \`\`\`
            
            #### 3. Initialize Main Terraform
            \`\`\`bash
            cd terraform
            terraform init
            terraform plan
            terraform apply
            \`\`\`
            
            ### ðŸ’° Monthly Costs
            - **S3 Storage**: ~$0.023/GB (very minimal for state files)
            - **DynamoDB**: Pay-per-request (~$0.0000125/request)
            - **Estimated Total**: ~$1-3/month
            
            ### ðŸ”’ Security Notes
            - State bucket has versioning enabled
            - Encryption at rest is enabled
            - Public access is blocked
            - DynamoDB table has point-in-time recovery enabled
            
            This issue can be closed once the main Terraform configuration is updated and working.`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Terraform State Management Setup Complete - Action Required',
              body: issueBody,
              labels: ['terraform', 'setup', 'action-required']
            });