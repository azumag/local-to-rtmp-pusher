# UDP配信システム - Docker設定ファイル
# Dockerコンテナの動作設定とリソース管理

# === 基本Docker設定 ===

# Docker API設定
docker_api_version=1.41
docker_host=unix:///var/run/docker.sock
docker_timeout=60

# 基本設定
compose_project_name=streaming
network_name=streaming-network
subnet=172.20.0.0/16

# === コンテナイメージ設定 ===

# FFmpegイメージ
ffmpeg_image=linuxserver/ffmpeg:latest
ffmpeg_pull_policy=IfNotPresent

# Alpineイメージ（Controller用）
alpine_image=alpine:latest
alpine_pull_policy=IfNotPresent

# === ネットワーク設定 ===

# IPアドレス割り当て
receiver_ip=172.20.0.10
controller_ip=172.20.0.12
sender_ip_range=172.20.0.20-172.20.0.100

# ポート設定
udp_port=1234
controller_port=8080
health_check_port=8081

# === リソース制限 ===

# Receiverコンテナ
[container.receiver]
cpu_limit=0.5
memory_limit=512m
cpu_reservation=0.2
memory_reservation=256m
restart_policy=unless-stopped

# Controllerコンテナ
[container.controller]
cpu_limit=0.3
memory_limit=256m
cpu_reservation=0.1
memory_reservation=128m
restart_policy=unless-stopped

# Senderコンテナ（動的）
[container.sender]
cpu_limit=0.3
memory_limit=256m
cpu_reservation=0.1
memory_reservation=128m
restart_policy=no
auto_remove=true

# === ボリューム設定 ===

# 動画ボリューム
[volume.videos]
type=bind
source=./videos
target=/app/videos
readonly=true

# ログボリューム
[volume.logs]
type=volume
driver=local
target=/app/logs

# 設定ボリューム
[volume.config]
type=bind
source=./config
target=/app/config
readonly=true

# Docker Socketボリューム（Controller用）
[volume.docker_socket]
type=bind
source=/var/run/docker.sock
target=/var/run/docker.sock

# === 環境変数設定 ===

# 共通環境変数
[env.common]
PUID=1000
PGID=1000
TZ=Asia/Tokyo

# Receiver環境変数
[env.receiver]
UDP_PORT=1234
RTMP_SERVER=${RTMP_SERVER}
STREAM_KEY=${STREAM_KEY}
LOG_LEVEL=${LOG_LEVEL}

# Controller環境変数
[env.controller]
DOCKER_API_VERSION=1.41
UDP_TARGET=${UDP_HOST}:${UDP_PORT}
FLASK_ENV=production
LOG_LEVEL=${LOG_LEVEL}

# Sender環境変数
[env.sender]
UDP_TARGET=${UDP_HOST}:${UDP_PORT}
LOG_LEVEL=${LOG_LEVEL}

# === ヘルスチェック設定 ===

# Receiverヘルスチェック
[healthcheck.receiver]
enabled=true
interval=30s
timeout=10s
retries=3
start_period=60s
test=CMD-SHELL || exit 1

# Controllerヘルスチェック
[healthcheck.controller]
enabled=true
interval=30s
timeout=5s
retries=3
start_period=30s
test=curl -f http://localhost:8080/api/health || exit 1

# Senderヘルスチェック
[healthcheck.sender]
enabled=false
# Senderは短時間実行のため無効

# === セキュリティ設定 ===

# 実行ユーザー設定
run_as_non_root=true
security_opt=no-new-privileges

# Capabilities
cap_drop=ALL
cap_add=

# AppArmor/SELinux
apparmor_profile=docker-default
selinux_type=

# === ログ設定 ===

# ログドライバー
[logging]
driver=json-file
max_size=10m
max_file=3
compress=true

# === 開発環境設定 ===

[environment.development]
# 開発時はリソース制限を緩く
receiver_cpu_limit=1.0
receiver_memory_limit=1g
controller_cpu_limit=0.5
controller_memory_limit=512m

# デバッグ情報を有効化
log_level=debug
healthcheck_enabled=false

# === 本番環境設定 ===

[environment.production]
# 本番時はリソース制限を厳格に
receiver_cpu_limit=0.5
receiver_memory_limit=512m
controller_cpu_limit=0.3
controller_memory_limit=256m

# セキュリティを強化
security_opt=no-new-privileges
readonly_rootfs=false
log_level=info

# === テスト環境設定 ===

[environment.testing]
# テスト時は短時間実行
auto_remove=true
restart_policy=no
log_level=debug

# より小さなリソース制限
receiver_cpu_limit=0.3
receiver_memory_limit=256m
controller_cpu_limit=0.2
controller_memory_limit=128m

# === 監視設定 ===

# メトリクス収集
[monitoring]
metrics_enabled=true
metrics_port=9090
prometheus_enabled=false

# アラート設定
alert_cpu_threshold=80
alert_memory_threshold=90
alert_disk_threshold=85

# === バックアップ設定 ===

# ボリュームバックアップ
[backup]
enabled=false
schedule=daily
retention_days=7
compress=true

# === 実験的機能 ===

# BuildKit設定
[buildkit]
enabled=true
builder=default

# Docker Compose V2
[compose]
version=v2
parallel=true
no_ansi=false

# === トラブルシューティング ===

# デバッグ設定
[debug]
enabled=false
container_logs=true
network_debug=false
volume_debug=false

# クリーンアップ設定
[cleanup]
auto_prune=true
prune_schedule=daily
remove_orphans=true
remove_volumes=false