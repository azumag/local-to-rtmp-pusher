#!/bin/bash

# StreamCaster Nano Instance Deployment Script
# Optimized for AWS Lightsail nano instance (1GB RAM)

set -e  # Exit on any error

# === CONFIGURATION ===
APP_USER="ubuntu"
APP_DIR="/home/$APP_USER/streamcaster"
LOG_FILE="/var/log/streamcaster-init.log"

# Variables passed from Terraform
REPOSITORY_URL="${repository_url}"
DEPLOYMENT_BRANCH="${branch}"
RTMP_SERVER="${rtmp_server}"
STREAM_KEY="${stream_key}"
RELAY_TARGET="${relay_target}"
LOG_LEVEL="${log_level}"
ENVIRONMENT="${environment}"
GOOGLE_DRIVE_API_KEY="${google_drive_api_key}"
GOOGLE_CLIENT_ID="${google_client_id}"
GOOGLE_CLIENT_SECRET="${google_client_secret}"
GOOGLE_REFRESH_TOKEN="${google_refresh_token}"

# === LOGGING FUNCTION ===
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

# === START DEPLOYMENT ===
log_message "Starting StreamCaster nano deployment..."
log_message "Repository: $REPOSITORY_URL"
log_message "Branch: $DEPLOYMENT_BRANCH"
log_message "Environment: $ENVIRONMENT"

# === UPDATE SYSTEM ===
log_message "Updating system packages..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get upgrade -y

# === INSTALL DOCKER ===
log_message "Installing Docker..."
apt-get install -y ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update -y
apt-get install -y docker-ce docker-ce-cli containerd.io

# === INSTALL DOCKER COMPOSE ===
log_message "Installing Docker Compose..."
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# === CONFIGURE DOCKER ===
log_message "Configuring Docker..."
systemctl enable docker
systemctl start docker
usermod -aG docker $APP_USER

# === CONFIGURE FIREWALL ===
log_message "Configuring UFW firewall..."
ufw --force enable
ufw default deny incoming
ufw default allow outgoing
ufw allow 22/tcp    # SSH
ufw allow 8080/tcp  # Web UI
ufw allow 1935/tcp  # RTMP
ufw allow 8081/tcp  # RTMP Stats

# === CLONE APPLICATION ===
log_message "Cloning StreamCaster application..."
cd /home/$APP_USER
if [ -d "streamcaster" ]; then
    rm -rf streamcaster
fi

# Clone as ubuntu user
sudo -u $APP_USER git clone --branch $DEPLOYMENT_BRANCH $REPOSITORY_URL streamcaster
cd streamcaster

# === SETUP APPLICATION DIRECTORIES ===
log_message "Setting up application directories..."
sudo -u $APP_USER mkdir -p videos logs config temp_downloads
sudo -u $APP_USER touch logs/streamcaster.log

# === CREATE ENVIRONMENT FILES ===
log_message "Creating environment configuration files..."
sudo -u $APP_USER cat > .env << EOF
# StreamCaster Production Configuration
# Generated by Terraform on $(date)

# === ENVIRONMENT ===
NODE_ENV=production
LOG_LEVEL=$LOG_LEVEL
TZ=Asia/Tokyo

# === NETWORK CONFIGURATION ===
HTTP_PORT=8080
RTMP_PORT=1935
STATS_PORT=8081
UDP_PORT=1234

# === RTMP STREAMING ===
RTMP_SERVER=$RTMP_SERVER
STREAM_KEY=$STREAM_KEY

# === APPLICATION SETTINGS ===
UDP_HOST=172.20.0.10
DOCKER_API_VERSION=1.41

# === RESOURCE LIMITS (optimized for nano instance) ===
CONTROLLER_CPU_LIMIT=0.2
CONTROLLER_MEMORY_LIMIT=128M
RECEIVER_CPU_LIMIT=0.3
RECEIVER_MEMORY_LIMIT=256M

# === VIDEO ENCODING (lightweight settings) ===
VIDEO_BITRATE=1000k
AUDIO_BITRATE=64k
VIDEO_GOP_SIZE=60
VIDEO_PRESET=fast

# === SYSTEM ===
PUID=1000
PGID=1000

# === GOOGLE DRIVE (optional) ===
GOOGLE_DRIVE_API_KEY=$GOOGLE_DRIVE_API_KEY
GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
GOOGLE_REFRESH_TOKEN=$GOOGLE_REFRESH_TOKEN

# === RELAY TARGET ===
RELAY_TARGET=$RELAY_TARGET
EOF

# Also create .env.production as backup
sudo -u $APP_USER cp .env .env.production

# === SET PROPER PERMISSIONS ===
log_message "Setting proper permissions..."
chown -R $APP_USER:$APP_USER /home/$APP_USER/streamcaster
chmod +x scripts/*.sh 2>/dev/null || true

# === BUILD AND START SERVICES ===
log_message "Building and starting Docker services..."
cd $APP_DIR

# Use nano-optimized docker-compose if available, otherwise use default
COMPOSE_FILE="docker-compose.yml"
if [ -f "docker-compose.nano.yml" ]; then
    COMPOSE_FILE="docker-compose.nano.yml"
    log_message "Using nano-optimized compose file"
fi

# Build images sequentially to reduce memory pressure
log_message "Building RTMP server image..."
sudo -u $APP_USER docker-compose -f $COMPOSE_FILE build rtmp-server

log_message "Building controller image..."
sudo -u $APP_USER docker-compose -f $COMPOSE_FILE build controller

# Start all services including receiver and relay
log_message "Starting all services..."
sudo -u $APP_USER docker-compose -f $COMPOSE_FILE build receiver relay
sudo -u $APP_USER docker-compose -f $COMPOSE_FILE --profile full up -d

# === CREATE SYSTEMD SERVICE ===
log_message "Creating systemd service..."
cat > /etc/systemd/system/streamcaster.service << EOF
[Unit]
Description=StreamCaster Application
Requires=docker.service
After=docker.service
StartLimitIntervalSec=0

[Service]
Type=oneshot
RemainAfterExit=yes
User=$APP_USER
Group=$APP_USER
WorkingDirectory=$APP_DIR
ExecStart=/usr/local/bin/docker-compose -f $COMPOSE_FILE --profile full up -d
ExecStop=/usr/local/bin/docker-compose -f $COMPOSE_FILE --profile full down
ExecReload=/usr/local/bin/docker-compose -f $COMPOSE_FILE --profile full restart
TimeoutStartSec=600
TimeoutStopSec=120
Restart=on-failure
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

# === ENABLE SERVICE ===
systemctl daemon-reload
systemctl enable streamcaster.service

# === CREATE MONITORING SCRIPT ===
log_message "Creating monitoring script..."
cat > /home/$APP_USER/check-services.sh << 'EOF'
#!/bin/bash
cd /home/ubuntu/streamcaster
echo "=== StreamCaster Service Status ==="
docker-compose --profile full ps
echo ""
echo "=== Container Logs (last 20 lines) ==="
docker-compose --profile full logs --tail=20
echo ""
echo "=== Resource Usage ==="
docker stats --no-stream
EOF
chmod +x /home/$APP_USER/check-services.sh
chown $APP_USER:$APP_USER /home/$APP_USER/check-services.sh

# === WAIT AND VERIFY ===
log_message "Waiting for services to start..."
sleep 30

# Check if services are running
if docker-compose -f $COMPOSE_FILE --profile full ps | grep -q "Up"; then
    log_message "SUCCESS: StreamCaster services are running!"
    docker-compose -f $COMPOSE_FILE --profile full ps >> $LOG_FILE
else
    log_message "WARNING: Services may not be fully started yet. Check logs with: docker-compose --profile full logs"
    docker-compose -f $COMPOSE_FILE --profile full ps >> $LOG_FILE
fi

log_message "Deployment completed. Check service status with: sudo -u ubuntu /home/ubuntu/check-services.sh"
log_message "Web UI should be available at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8080"