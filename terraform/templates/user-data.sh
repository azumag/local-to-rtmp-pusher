#!/bin/bash
# StreamCaster Instance Initialization Script
# This script runs on first boot to set up the environment

set -euo pipefail

# === CONFIGURATION ===
REPOSITORY_URL="${repository_url}"
DEPLOYMENT_BRANCH="${branch}"
RTMP_SERVER="${rtmp_server}"
STREAM_KEY="${stream_key}"
LOG_LEVEL="${log_level}"
ENVIRONMENT="${environment}"
APP_USER="ubuntu"
APP_DIR="/home/$APP_USER/streamcaster"
LOG_FILE="/var/log/streamcaster-init.log"

# === LOGGING SETUP ===
exec 1> >(tee -a $LOG_FILE)
exec 2>&1
echo "=== StreamCaster Initialization Started at $(date) ==="
echo "Environment: $ENVIRONMENT"
echo "Repository: $REPOSITORY_URL"
echo "Branch: $DEPLOYMENT_BRANCH"

# === SYSTEM UPDATES ===
echo "Updating system packages..."
apt-get update -y
apt-get upgrade -y

# === INSTALL ESSENTIAL PACKAGES ===
echo "Installing essential packages..."
apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    htop \
    tree \
    jq \
    net-tools \
    lsof

# === INSTALL DOCKER ===
echo "Installing Docker..."
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
usermod -aG docker $APP_USER

# === INSTALL DOCKER COMPOSE ===
echo "Installing Docker Compose..."
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
    -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# === INSTALL AWS CLI (for monitoring and management) ===
echo "Installing AWS CLI..."
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install
rm -rf aws awscliv2.zip

# === CONFIGURE FIREWALL ===
echo "Configuring UFW firewall..."
ufw --force enable
ufw default deny incoming
ufw default allow outgoing
ufw allow 22/tcp    # SSH
ufw allow 8080/tcp  # Web UI
ufw allow 1935/tcp  # RTMP
ufw allow 8081/tcp  # RTMP Stats

# === CLONE APPLICATION ===
echo "Cloning StreamCaster application..."
cd /home/$APP_USER
if [ -d "streamcaster" ]; then
    rm -rf streamcaster
fi

# Clone as ubuntu user
sudo -u $APP_USER git clone --branch $DEPLOYMENT_BRANCH $REPOSITORY_URL streamcaster
cd streamcaster

# Set up tracking for main branch for auto-updates
sudo -u $APP_USER git remote set-url origin $REPOSITORY_URL
sudo -u $APP_USER git fetch origin
sudo -u $APP_USER git branch --track main origin/main 2>/dev/null || true

# === SETUP APPLICATION DIRECTORIES ===
echo "Setting up application directories..."
sudo -u $APP_USER mkdir -p videos logs temp_downloads
sudo -u $APP_USER touch logs/streamcaster.log

# === CREATE ENVIRONMENT FILE ===
echo "Creating production environment file..."
sudo -u $APP_USER cat > .env.production << EOF
# StreamCaster Production Configuration
# Generated by Terraform on $(date)

# Application Configuration
NODE_ENV=production
PORT=8080
LOG_LEVEL=$LOG_LEVEL

# RTMP Configuration
RTMP_SERVER=$RTMP_SERVER
STREAM_KEY=$STREAM_KEY

# Network Configuration
UDP_HOST=172.20.0.10
UDP_PORT=1234
HTTP_PORT=8080
RTMP_PORT=1935

# Resource Limits
CONTROLLER_CPU_LIMIT=0.3
RECEIVER_CPU_LIMIT=0.5
CONTROLLER_MEMORY_LIMIT=256M
RECEIVER_MEMORY_LIMIT=512M

# Docker Configuration
COMPOSE_PROJECT_NAME=streamcaster
DOCKER_BUILDKIT=1

# Timezone
TZ=Asia/Tokyo

# Security
ALLOWED_ORIGINS=http://localhost:8080

# Performance Settings
MAX_DOWNLOAD_SIZE=1073741824
TEMP_FILE_TTL=3600000

# Video Processing Settings
VIDEO_BITRATE=2000k
AUDIO_BITRATE=128k
VIDEO_GOP_SIZE=120
VIDEO_PRESET=medium
EOF

# === INSTALL NODE.JS (for development/debugging if needed) ===
echo "Installing Node.js..."
curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
apt-get install -y nodejs

# === SET PROPER PERMISSIONS ===
echo "Setting proper permissions..."
chown -R $APP_USER:$APP_USER /home/$APP_USER/streamcaster
chmod +x scripts/*.sh 2>/dev/null || true

# === CREATE SYSTEMD SERVICE ===
echo "Creating systemd service..."
cat > /etc/systemd/system/streamcaster.service << EOF
[Unit]
Description=StreamCaster Application
Requires=docker.service
After=docker.service
StartLimitIntervalSec=0

[Service]
Type=oneshot
RemainAfterExit=yes
User=$APP_USER
Group=$APP_USER
WorkingDirectory=$APP_DIR
ExecStart=/usr/local/bin/docker-compose --env-file .env.production up -d
ExecStop=/usr/local/bin/docker-compose --env-file .env.production down
ExecReload=/usr/local/bin/docker-compose --env-file .env.production restart
TimeoutStartSec=300
TimeoutStopSec=120
Restart=on-failure
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

# === CREATE LOG ROTATION ===
echo "Setting up log rotation..."
cat > /etc/logrotate.d/streamcaster << EOF
$APP_DIR/logs/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    copytruncate
    create 644 $APP_USER $APP_USER
}

/var/log/streamcaster-init.log {
    weekly
    missingok
    rotate 4
    compress
    delaycompress
    copytruncate
    create 644 root root
}
EOF

# === SETUP MONITORING SCRIPT ===
echo "Creating monitoring script..."
sudo -u $APP_USER cat > $APP_DIR/scripts/health-monitor.sh << 'EOF'
#!/bin/bash
# Health monitoring script for StreamCaster

LOG_FILE="/home/ubuntu/streamcaster/logs/health-monitor.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# Function to log messages
log_message() {
    echo "[$DATE] $1" >> $LOG_FILE
}

# Check if containers are running
check_containers() {
    cd /home/ubuntu/streamcaster
    local containers=$(docker-compose --env-file .env.production ps -q)
    local running=$(docker-compose --env-file .env.production ps -q | wc -l)
    
    if [ $running -eq 0 ]; then
        log_message "ERROR: No containers are running, attempting restart..."
        docker-compose --env-file .env.production up -d
        return 1
    else
        log_message "INFO: $running containers are running"
        return 0
    fi
}

# Check API health
check_api() {
    local response=$(curl -s -o /dev/null -w "%%{http_code}" http://localhost:8080/api/health || echo "000")
    
    if [ "$response" = "200" ]; then
        log_message "INFO: API health check passed"
        return 0
    else
        log_message "ERROR: API health check failed (HTTP $response)"
        return 1
    fi
}

# Main execution
main() {
    log_message "INFO: Starting health check"
    
    if check_containers && check_api; then
        log_message "INFO: All health checks passed"
        exit 0
    else
        log_message "ERROR: Health check failed"
        exit 1
    fi
}

main "$@"
EOF

chmod +x $APP_DIR/scripts/health-monitor.sh

# === SETUP AUTO-UPDATE SCRIPT ===
echo "Creating auto-update script..."
sudo -u $APP_USER cat > $APP_DIR/scripts/auto-update.sh << 'EOF'
#!/bin/bash
# Auto-update script for StreamCaster

LOG_FILE="/home/ubuntu/streamcaster/logs/auto-update.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# Function to log messages
log_message() {
    echo "[$DATE] $1" >> $LOG_FILE
}

# Check for updates and restart if needed
update_and_restart() {
    cd /home/ubuntu/streamcaster
    
    # Fetch latest changes from main branch
    git fetch origin main
    
    # Check if there are new commits
    local local_commit=$(git rev-parse HEAD)
    local remote_commit=$(git rev-parse origin/main)
    
    if [ "$local_commit" != "$remote_commit" ]; then
        log_message "INFO: New commits detected on main branch, updating..."
        
        # Pull latest changes from main
        git pull origin main
        
        if [ $? -eq 0 ]; then
            log_message "INFO: Git pull successful, restarting containers..."
            
            # Restart all containers to apply changes
            docker-compose --env-file .env.production restart
            
            if [ $? -eq 0 ]; then
                log_message "INFO: Container restart successful"
                
                # Wait a bit and verify health
                sleep 10
                if curl -f http://localhost:8080/api/health >/dev/null 2>&1; then
                    log_message "INFO: Application health check passed after update"
                else
                    log_message "WARNING: Application health check failed after update"
                fi
            else
                log_message "ERROR: Container restart failed"
            fi
        else
            log_message "ERROR: Git pull failed"
        fi
    else
        log_message "INFO: No updates available"
    fi
}

# Main execution
main() {
    log_message "INFO: Starting auto-update check"
    update_and_restart
    log_message "INFO: Auto-update check completed"
}

main "$@"
EOF

chmod +x $APP_DIR/scripts/auto-update.sh

# === SETUP CRON JOBS ===
echo "Setting up cron jobs..."
sudo -u $APP_USER crontab -l 2>/dev/null | { cat; echo "*/5 * * * * /home/ubuntu/streamcaster/scripts/health-monitor.sh"; echo "*/10 * * * * /home/ubuntu/streamcaster/scripts/auto-update.sh"; } | sudo -u $APP_USER crontab -

# === PULL DOCKER IMAGES AND START APPLICATION ===
echo "Starting StreamCaster application..."
cd $APP_DIR
sudo -u $APP_USER docker-compose --env-file .env.production pull
sudo -u $APP_USER docker-compose --env-file .env.production build receiver relay
sudo -u $APP_USER docker-compose --env-file .env.production up -d

# === ENABLE AND START SERVICE ===
systemctl daemon-reload
systemctl enable streamcaster.service

# === WAIT FOR APPLICATION TO START ===
echo "Waiting for application to start..."
sleep 30

# === VERIFY INSTALLATION ===
echo "Verifying installation..."
if curl -f http://localhost:8080/api/health; then
    echo "SUCCESS: StreamCaster is running and healthy!"
else
    echo "WARNING: StreamCaster may not be fully ready yet. Check logs with: sudo -u ubuntu docker-compose -f $APP_DIR/docker-compose.yml logs"
fi

# === CLEANUP ===
echo "Cleaning up..."
rm -f /home/$APP_USER/get-docker.sh

# === FINAL STATUS ===
echo "=== StreamCaster Initialization Completed at $(date) ==="
echo "Access URLs:"
echo "  Web UI: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8080"
echo "  RTMP Stats: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8081/stat"
echo "  RTMP Pull: rtmp://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):1935/live/stream"
echo ""
echo "Logs location: $LOG_FILE"
echo "Application directory: $APP_DIR"
echo ""
echo "To check status: systemctl status streamcaster"
echo "To view logs: sudo -u ubuntu docker-compose -f $APP_DIR/docker-compose.yml logs -f"

# === CREATE READY FILE ===
touch /tmp/streamcaster-init-complete